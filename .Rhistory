tapply(NEI$Emissions,NEI$year,sum)
install.packages("plyr")
library("plyr", lib.loc="~/R/win-library/3.1")
?ddply()
ddply(NEI,.(Year),summarize,sum(Emissions))
ddply(NEI,NEI$Year,summarize,sum(Emissions))
ddply(NEI,.(year),summarize,sum(Emissions))
?ddply()
ddply(NEI,.(year),summarize,total=sum(Emissions))
totalByYear<-ddply(NEI,.(year),summarize,total=sum(Emissions))
?plot()
plot(totalByYear$year,totalByYear$total,type="b",main="Yearly Trend In Total Emissions")
plot(totalByYear$year,totalByYear$total,type="b",main="Yearly Trend In Total Emissions",xlab="Year",ylab="Total Emissions, tons")
?subset()
justBMore<-subset(NEI,NEI$fips=="24510")
## Here to require plyr package
## Comment the following statement fully
totalByYear<-ddply(NEI,.(year),summarize,total=sum(Emissions))
totalByYear<-ddply(justBMore,.(year),summarize,total=sum(Emissions))
plot(totalByYear$year,totalByYear$total,type="b",main="Yearly Trend In Total Emissions, BMore",xlab="Year",ylab="Total Emissions, tons in BMore")
totalByTypeYear<-ddply(justBMore,.(type, year), summarize, total=sum(Emissions))
totalByTypeYear
qplot(year,total,data=totalByTypeYear,facets=.~type)
library("ggplot2", lib.loc="~/R/win-library/3.1")
qplot(year,total,data=totalByTypeYear,facets=.~type)
SCC$Data.Category
SCC$EI.Sector
?levels()
levels(SCC$SCC.Level.One)
levels(SCC$SCC.Level.Two)
levels(SCC$EI.Sector)
justCoalSources<-SCC[SCC$EI.Sector==13,SCC]
justCoalSources<-SCC[(SCC$EI.Sector==13),SCC]
justCoal<-SCC$EI.Sector=="Fuel Comb - Comm/Institutional - Coal"
justCoalSources<-SCC[justCoal,SCC]
justCoalSources<-SCC[justCoal,"SCC"]
levels(justCoalSources)
justCoalSources<-SCC[justCoal,]
head(justCoalSources)
justCoalSources$SCC
justCoalSCC<-justCoalSources$SCC
justCoalSCC
justCoalINT<-as.int(justCoalSCC)
justCoalINT<-as.integer(justCoalSCC)
justCoalINT
justCoalChr<-as.character(justCoalSCC)
NEI_Coal<-NEI$SCC%in%justCoalChr
count(NEI_Coal)
onlyCoalEmiss<-NEI[NEI_Coal,]
totalCoalByYear<-ddply(onlyCoalEmiss,.(year),total=sum(Emissions))
totalCoalByYear<-ddply(onlyCoalEmiss,.(year),summarize,total=sum(Emissions))
totalCoalByYear
plot(totalCoalByYear$year,totalCoalByYear$total,type="b",main="Yearly Trend in Emissions from Coal" xlab="Year",ylab="Total Emissions, tons")
plot(totalCoalByYear$year,totalCoalByYear$total,type="b",main="Yearly Trend in Emissions from Coal" ,xlab="Year",ylab="Total Emissions, tons")
NEI <- readRDS("./EDA_Project2/summarySCC_PM25.rds")
SCC <- readRDS("./EDA_Project2/Source_Classification_Code.rds")
levels(SCC$EI.Sector)
levels(SCC$SCC.Level.One)
levels(SCC$Option.Group)
levels(SCC$Option.Set)
?grep()
motVehic<-SCC[grep("Mobile",SCC$EI.Sector),]
motVehic<-SCC[grep("Mobile",SCC$EI.Sector),"SCC"]
motVehicChr<-as.character(motVehic)
justBMore<-subset(NEI,NEI$fips=="24510")
BMore_Motors<-justBMore$SCC%in%motVehicChr
justBMoreMotor<-justBMore[BMore_Motors,]
BMoreMotorByYear<-ddply(justBMoreMotor,.(year),summarize,total=sum(Emissions))
plot(BMoreMotorByYear$year,BMoreMotorByYear$total,main="Baltimore Motor Vehicle Emissions",type="b",xlab="Year",ylab="Total Emissions, tons")
twoCities<-subset(NEI,NEI$fips%in%c("24510","06037"))
twoCities_Motors<-twoCities$SCC%in%motVehicChr
twoCitiesMotEmiss<-twoCities[twoCities_Motors,]
twoCitiesByYear<-ddply(twoCtiesMotEmiss,.(year,fips),summarize,total=sum(Emissions))
twoCitiesByYear<-ddply(twoCitiesMotEmiss,.(year,fips),summarize,total=sum(Emissions))
twoCitiesByYear
twoCitiesByYear<-ddply(twoCitiesMotEmiss,.(fips, year),summarize,total=sum(Emissions))
twoCitiesByYear<-ddply(twoCitiesMotEmiss,.(fips, year),summarize,total=sum(Emissions))
twoCitiesByYear
qplot(year,total,data=twoCitiesByYear,facets=.~fips)
?read.table()
colLabels<-read.table("./y_train.txt",sep="")
colLabels<-read.table("./features.txt",sep="")
colLabels<-read.table("./features.txt",sep="",stringsAsFactors=FALSE)
?grep()
goodLabels<-grep("mean",colLabels$V2)
goodLabels<-grep("mean",colLabels$V2,value="TRUE")
goodLabels2<-grep("std",colLabels$V2,value="TRUE")
goodLabels
goodLabels<-grep("mean()",colLabels$V2,value="TRUE")
goodLabels
goodLabels<-grep("mean | std",colLabels$V2,value="TRUE")
goodLabels<-grep("mean(",colLabels$V2,value="TRUE")
goodLabels<-grep("mean",colLabels$V2,value="TRUE")
goodLabels<-grep("mean/(/",colLabels$V2,value="TRUE")
goodLabels<-grep("mean\(\",colLabels$V2,value="TRUE")
goodLabels<-grep("*mean",colLabels$V2,value="TRUE",fixed="TRUE")
goodLabels<-grep("mean",colLabels$V2,value="TRUE",fixed="TRUE")
goodLabels<-grep("mean\(",colLabels$V2,value="TRUE",fixed="TRUE")
?contains()
goodLabels<-grepl("mean",colLabels$V2)
all_mean<-grepl("mean",colLabels$V2)
all_std<-grepl("std",colLabels$V2)
just_meanFreq<-grepl("meanFreq",colLabels$V2)
count(just_meanFreq)
sum(just_meanFreq)
just_mean<-all_mean!just_meanFreq
just_mean<-all_mean ! just_meanFreq
just_mean<-all_mean &!just_meanFreq
sum(just_mean)
all_kept<-just_mean&all_std
all_kept<-just_mean|all_std
sum(all_kept)
trainData<-read.table("./X_train",sep="")
trainData<-read.table("./X_train.txt",sep="")
keptTrain<-trainData[,all_kept]
?labels()
?col.names()
?colNames()
?row.names()
?read.table()
trainData<-read.table("./X_train.txt",sep="",col.names=colLabels$V2)
keptTrain<-trainData[,all_kept]
activityID<-read.table("./y_train.txt",sep="")
gsub("1","WALKING",activityID)
activityID<-gsub("1","WALKING",activityID)
activityID<-gsub("2","WALKING_UPSTAIRS",activityID)
activityID<-gsub("3","WALKING_DOWNSTAIRS",activityID)
activityID<-gsub("4","SITTING",activityID)
activityID<-gsub("5","STANDING",activityID)
activityID<-gsub("6","LAYING",activityID)
?cbind()
withAct<-cbind(activityID,keptTrain)
head(withAct,3)
activityID<-read.table("./y_train.txt",sep="",col.names="ActID")
withAct<-cbind(activityID,keptTrain)
subjTrain<-read.table("./subject_train.txt",sep="",col.names="SubjID")
withSubjAct<-cbind(subjTrain,withAct)
source('~/Course3_Project/WIP_Course3_Project.R')
testData<-read.table("./X_test.txt",sep="")
## Subset the training data to keep only the desired columns
keptTest<-testData[,all_kept]
## Boom goes the dynamite.
testActID<-read.table("./y_test.txt",sep="")
testWithAct<-cbind(testActID,keptTest)
## Now to bind the Subject ID's
subjTest<-read.table("./subject_test.txt",sep="")
testWithBoth<-cbind(subjTest,testWithAct)
testData<-read.table("./X_test.txt",sep="")
## Subset the training data to keep only the desired columns
keptTest<-testData[,all_kept]
## Boom goes the dynamite.
testActID<-read.table("./y_test.txt",sep="")
testWithAct<-cbind(testActID,keptTest)
## Now to bind the Subject ID's
subjTest<-read.table("./subject_test.txt",sep="")
testWithBoth<-cbind(subjTest,testWithAct)
fullData<-rbind(testWithBoth,withSubjAct)
?rbind
rbind(testWithBoth,withSubjAct)
source('~/Course3_Project/WIP_Course3_Project.R')
fullData<-rbind(testWithBoth,withSubjAct)
library(plyr)
colsForAvg<-colLabels[all_kept]
colsForAvg<-colLabels[all_kept,2]
ddply(fullData,.(SubjID, ActID),summarize,total=sum(colsForAvg))
?ddply()
?tapply()
ddply(fullData,.(SubjID, ActID),summarize,aver=average(colsForAvg$1))
ddply(fullData,.(SubjID, ActID),summarize,aver=average(colsForAvg[1]))
ddply(fullData,.(SubjID, ActID),summarize,aver=mean(colsForAvg[1]))
colsForAvg[1]
ddply(fullData,.(SubjID, ActID),summarize,aver=mean(fullData[,3]))
source('~/Course3_Project/WIP_Course3_Project.R')
monkey<-split(fullData,c("SubjID","ActID"))
monkey<-split(fullData,c(fullData$SubjID,fullData$ActID))
?split()
toroidal<-tapply(monkey,mean)
toroidal<-lapply(monkey,mean)
?lapply()
monkey<-split(fullData,list(fullData$SubjID,fullData$ActID))
sapply(monkey,colmeans)
sapply(monkey,colmeans())
?colmeans()
?colMeans()
sapply(monkey,colMeans())
sapply(monkey,colMeans(x))
sapply(monkey,colMeans(monkey))
lapply(monkey,colMeans())
lapply(monkey,colMeans(x))
lapply(monkey,function(x) colMeans(x,na.rm=TRUE))
sapply(monkey,function(x) colMeans(x,na.rm=TRUE))
terwilliger<-sapply(monkey,function(x) colMeans(x,na.rm=TRUE))
tiger<-lapply(monkey,function(x) colMeans(x,na.rm=TRUE))
?unsplit()
unsplit(tiger,list("SubjID","ActID"))
head(tiger)
source('~/.active-rstudio-document')
wolf<-aggregate(fullData,list(fullData[-(1:2)] ~ SubjID+ActID, data=fullData, FUN=mean)
)
wolf<-aggregate(fullData[-(1:2)] ~ SubjID+ActID, data=fullData, FUN=mean)
?aggregate()
pickle<-fullData[-(1:2)]
type(pickle)
data.frame(pickle)
pickle<-data.frame(fullData[-(1:2)])
wolf<-aggregate(data.frame(fullData[-(1:2)]) ~ SubjID+ActID, data=fullData, FUN=mean)
wolf<-aggregate(list(fullData[-(1:2)]) ~ SubjID+ActID, data=fullData, FUN=mean)
?require()
source('~/EDA_Project2/WIP.R')
?plot()
source('~/EDA_Project2/WIP.R')
source('~/EDA_Project2/WIP.R')
source('~/EDA_Project2/plot1.R')
source('~/EDA_Project2/plot1.R')
source('~/EDA_Project2/plot2.R')
source('~/EDA_Project2/plot4.R')
source('~/EDA_Project2/plot5.R')
source('~/EDA_Project2/plot3.R')
source('~/EDA_Project2/plot3.R')
source('~/EDA_Project2/plot6.R')
?labs()
g<-gqplot(year,total,data=twoCitiesByYear,facets=.~fips)
print(g+ylab("Total Motor Vehicle Emissions, tons"))
g+ylab("Total Motor Vehicle Emission, tons")
g<-qplot(year,total,data=twoCitiesByYear,facets=.~fips)
print(g+ylab("Total Motor Vehicle Emissions, tons"))
?qplot
levels(twoCitiesByYear$fips)
?as.factor()
source('~/EDA_Project2/plot6.R')
qplot(year,total,data=twoCitiesByYear,facets=.~fips, ylab="Total Motor Vehicle Emissions, tons")
source('~/EDA_Project2/plot6.R')
source('~/EDA_Project2/plot3.R')
?multiplot()
?ggplot()
g<-ggplot(totalByYear,aes(year,total))
g<-ggplot(totalByTypeYear,aes(year,total))
g+geom_point(alpha=1/3)+facet_wrap(fips, nrow=2, ncol=2)
g+geom_point(alpha=1/3)+facet_wrap(totalByTypeYear$fips, nrow=2, ncol=2)
g+geom_point(alpha=1/3)+facet_wrap(totalByTypeYear~fips, nrow=2, ncol=2)
?facet_wrap
g+geom_point(alpha=1/3)+facet_wrap(facets=.~fips, nrow=2, ncol=2)
print(g)
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point()
g + facet_grid(.~)
source('~/.active-rstudio-document')
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point()
print(g)
g+facet_grid(.~type)
g+facet_grid(.~type, ncol=2, nrow=2)
g+facet_wrap(.~type, ncol=2, nrow=2)
g+facet_wrap(.~type)
?facet_wrap
?facet_grid
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point()
g+facet_wrap(.~type)
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point()
g+facet_wrap(~type)
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point()
print(g+facet_wrap(~type,ncol=2, nrow=2))
?geom_smooth()
g<-ggplot(totalByTypeYear, aes(year,total))+geom_point() + geom_smooth()
print(g+facet_wrap(~type,ncol=2, nrow=2))
source('~/EDA_Project2/plot3.R')
source('~/EDA_Project2/plot3.R')
source('~/EDA_Project2/plot3.R')
source('~/EDA_Project2/plot3.R')
source('~/Course3_Project/WIP_Course3_Project.R')
wolf<-aggregate(fullData,list(fullData$SubjID,fullData$ActID), FUN=mean)
head(wolf,2)
source('~/Course3_Project/WIP_Course3_Project.R')
source('~/Course3_Project/WIP_Course3_Project.R')
colLabels<-read.table("./features.txt",sep="",stringsAsFactors=FALSE)
all_kept<-<-grepl("mean\\(\\)|std",colLabels$V2)
all_kept<-<-grepl("mean|std",colLabels$V2)
all_kept<-grepl("mean\\(\\)|std",colLabels$V2)
all_kept
all_mean<-grepl("mean\\(\\)|std",colLabels$V2)
just_meanFreq<-grepl("meanFreq",colLabels$V2)
## Since I can't be bothered how to do "not' in a grep statement ...
just_mean<-all_mean &!just_meanFreq
all_std<-grepl("std",colLabels$V2)
## Keep a vector with the std or means
all_kept2<-just_mean|all_std
all_kept2
source('~/Course3_Project/WIP_Course3_Project.R')
pickle<-col.names(tidier)
pickle<-colnames(tidier)
pickle
?write()
write(pickle,"./TidyColumnNames.txt")
?gsub()
pickle<-colnames(tidier)
source('~/Course3_Project/WIP_Course3_Project.R')
betterCols
source('~/Course3_Project/WIP_Course3_Project.R')
betterCols
colnames(tidier)<-betterCols
?write.table()
write.table(tidier,"./tidyData.txt",sep=" ",row.names=FALSE)
?read.table()
read.table("./tidyData.txt", header=TRUE, sep=" ")
pickle<-read.table("./tidyData.txt", header=TRUE, sep=" ")
levels(pickle$ActID)
source('~/Course3_Project/run_analysis.R')
library("ggplot2", lib.loc="~/R/win-library/3.1")
source('~/Course3_Project/run_analysis.R')
install.packages("UsingR")
library("UsingR", lib.loc="~/R/win-library/3.1")
data(father.son)
labels(father.son)
x<-father.son$fheight
(mean(x)+c(1,-1)*qnorm(0.975)*sd(x)/sqrt(length(x)))
poisson.test(600,T=60)$conf
?qnorm
qnorm(0.95,mean=1100,sd=75,lower.tail=TRUE)
?pbinom
pbinom(4,5,0.5)
pbinom(5,5,0.5)
rbinom(4,5,0.5)
pbinom(4,5,0.5,lower.tail=FALSE)
pbinom(3,5,0.5,lower.tail=FALSE)
ppois(10,5*3)
?ppois()
qnorm(0.95,mean=1100,sd=0.75,lower.tail=TRUE)
qnorm(0.95,mean=1100,sd=7.5,lower.tail=TRUE)
?t.test
?dt
qt(0.95,8)
qt(0.975,8)
qt(0.975,18)
sp<-sqrt((9*0.60^2+9*0.68^2)/18)
interval<--2+c(1,-1)*2.101*sp
interval<--2+c(1,-1)*2.101*sp*sqrt(0.2)
-2+c(-1,1)*sp*qt(0.975,18)*sqrt((1/10)+(1/10))
pnorm(0.975)
qnorm(0.975)
6-4+c(-1,1)*qnorm(0.975)*sqrt((0.5^2/100)+(2^2/100))
sp<-sqrt((8*1.5^2+8*1.8^2)/16)
-4+c(-1,1)*sp*qt(0.95,16)*sqrt((1/9)+(1/9))
x1<-c(140,138,150,148,135)
x2<-c(132,135,151,146,130)
?t.test
y=x1-x2
data(ToothGrowth)
?summarize()
?summary()
?describe()
summary(ToothGrowth)
ToothGrowth
hist(ToothGrowth$len)
hist(ToothGrowth[supp="VC",len])
hist(ToothGrowth[supp="VC",1])
hist(ToothGrowth[$supp="VC",1])
smaller<-ToothGrowth[$supp="VC",$len]
smaller<-ToothGrowth[supp="VC",len]
smaller<-ToothGrowth[supp=="VC",len]
ToothGrowth[supp=="VC"]
ToothGrowth[supp=="VC",]
ToothGrowth[$supp=="VC",]
?subset
subset(ToothGrowth, ToothGrowth$supp=="VC")
noodle<-subset(ToothGrowth, ToothGrowth$supp=="VC")
knife<-subset(ToothGrowth, ToothGrowth$supp=="OJ")
mean(noodle$len)
mean(knife$len)
hist(noodle$len)
hist(knife$len)
sd(knife$len)
sd(noodle$len)
?hist()
?t.test()
t.test(knife$len,noodle$len)
t.test(knife$len,noodle$len,conf.level=0.90)
?boxplot()
boxplot(len~supp,data=ToothGrowth)
t.test(withOJ$len,withVC$len)
withOJ<-subset(ToothGrowth,ToothGrowth$supp=="OJ")
withVC<-subset(ToothGrowth,ToothGrowth$supp=="VC")
t.test(withOJ$len,withVC$len)
t.test(withOJ$len,withVC$len)$conf
?t.test()
t.test(withOJ$len,withVC$len)$estimate
t.test(withOJ$len,withVC$len)$alternative
t.test(withOJ$len,withVC$len)$null.value
t.test(withOJ$len,withVC$len)$conf.int
bollocks<-t.test(withOJ$len,withVC$len)$conf.int
bollocks
bollocks[1]
bollocks[2]
source('~/GitHub/StatInfProject/Project1Part2.R')
source('~/GitHub/StatInfProject/Project1Part2.R')
source('~/GitHub/StatInfProject/Project1Part2.R')
dose_comp
rownames(dose_comp)
rownames(dose_comp)<-c("High - Medium","High - Low", "Medium - Low")
dose_comp
colnames(dose_comp)<-c("low range","high range")
dose_comp
?round()
before<-c(140,138,150,148,135)
after<-c(132,135,151,146,130)
?t.test
t.test(before,after,paired=TRUE)
t.test(before,after,paired=FALSE)
qt(0.975,9,lower.tail=FALSE)
qt(0.975,9,lower.tail=FALSE)*30
1100+qt(0.975,9,lower.tail=FALSE)*30
1100+qt(0.975,8,lower.tail=FALSE)*30
1100+qt(0.975,80,lower.tail=FALSE)*30
qt(0.975,80,lower.tail=FALSE)
qt(0.975,800,lower.tail=FALSE)
?t.binom
?binom.test
binom.test(3,4,p=0.5,alternative="greater")
binom.test(3,4,p=0.5,alternative="less")
binom.test(3,4,p=0.5,alternative="two.sided")
?p.test
?poisson.test()
poisson.test(10,1787,0.01,alternative="less")
poisson.test(10,1787,0.01,alternative="greater")
poisson.test(10,1787,0.01,alternative="two.sided")
sp<-sqrt((8*1.8+8*1.5)/16)
-3-1+c(-1,1)*sp*qt(0.975,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.95,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.85,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.5,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.6,16)*sqrt(2/9)
qt(0.975,16)
sp<-sqrt((8*1.8^2+8*1.5^2)/16)
-3-1+c(-1,1)*sp*qt(0.975,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.95,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.99,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.995,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.9995,16)*sqrt(2/9)
-3-1+c(-1,1)*sp*qt(0.99995,16)*sqrt(2/9)
1100 + c(-1,1)*qt(0.975,8)*30/sqrt(9)
1100 + c(-1,1)*qt(0.95,8)*30/sqrt(9)
install.packages("caret")
library("caret", lib.loc="~/R/win-library/3.1")
install.packages("AppliedPredictiveModeling")
set.seed(3433)
data(AlzheimerDisease)
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
set.seed(3433)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
inTrain=createDataPartition(adData$diagnosis, p=3/4)[[1]]
training=adData[inTrain]
training=adData[inTrain,]
testing=adData[-inTrain,]
?preprocess()
?preProcess()
install.packages(c("DBI", "formatR", "gsubfn", "htmltools", "httr", "jsonlite", "labeling", "markdown", "RCurl", "swirl", "UsingR", "xlsx", "xlsxjars", "yaml"))
library("knitr", lib.loc="~/R/win-library/3.1")
data(swiss)
fit<-lm(Fertility~,,data=swiss)
fit<-lm(Fertility~.,data=swiss)
plot(fit)
data(mtcars)
?lm()
?mtcars
lm(mpg~cyl + wt, data=mtcars)
lm(mpg~cyl, data=mtcars)
plot(resid(lm(mpg~wt, data=mtcars)),resid(lm(cyl~wt,data=mtcars)))
lm(mpg~cyl:wt,data=mtcars)
lm(mpg~cyl+wt,data=mtcars)
modelCon<-lm(mpg~cyl+wt, data=mtcars)
modelInt<-lm(mpg~cyl:wt, data=mtcars)
summary(modelCon)
summary(modelInt)
?lrtest()
install.packages("lmtest")
library(lmtest)
lrtest(modelInt,modelCon)
?lrtest()
modelInt<-lm(mpg~cyl*wt, data=mtcars)
lrtest(modelInt,modelCon)
lrtest(modelCon,modelInt)
lm(mpg~I(wt*0.5)+factor(cyl),data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl),data=mtcars)
?mtcars
x<-c(0.586,0.166,-0.042, -0.614, 11.72)
y<-c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5<-lm(y~x)
hatvalues(fit)
max(hatvalues(fit))
qq<-hatvalues(fit)
dfbeta(fit)
hatvalues(fit5)
dfbeta(fit5)
?dfbeta()
-0.9313/0.00743
dfbeta(lm(y~x))
setwd("~/GitHub/LinRegress_Proj")
data(mtcars)
summary(mtcars)
?mtcars
?boxplot()
boxplot(mpg~am, data=mtcars)
boxplot(mpg~am, data=mtcars, names=c("Automatic","Manual"),ylab="Miles per Gallon")
boxplot(mpg~am, data=mtcars, names=c("Automatic","Manual"),ylab="Miles per Gallon", main="MPG as a Function of Transmission")
boxplot(mpg~am, data=mtcars, names=c("Automatic","Manual"),ylab="Miles per Gallon", main="MPG as a Function of Transmission", col=mtcars$am)
boxplot(wt~am, data=mtcars, names=c("Automatic","Manual"),ylab="Miles per Gallon", main="MPG as a Function of Transmission", col=mtcars$am)
boxplot(wt~am, data=mtcars, names=c("Automatic","Manual"),ylab="Weight/1000s lbs")
?plot()
?color_by
?colorby
plot(mpg~wt,data=mtcars,col=mtcars$am)
plot(mpg~wt,data=mtcars,col=mtcars$am+2)
plot(mpg~wt,data=mtcars,col=mtcars$am+2, type="p",pch=mtcars$am+15)
